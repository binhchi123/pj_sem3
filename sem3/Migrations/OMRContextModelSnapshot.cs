// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using sem3.Areas.Admin.Models.BusinessModels;

namespace sem3.Migrations
{
    [DbContext(typeof(OMRContext))]
    partial class OMRContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("sem3.Areas.Admin.Models.DataModels.ContactModel", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateOfMessage");

                    b.Property<string>("Message")
                        .IsRequired();

                    b.Property<string>("Reply");

                    b.Property<int>("UserId");

                    b.HasKey("ContactId");

                    b.HasIndex("UserId");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("sem3.Areas.Admin.Models.DataModels.RechargeLogsModel", b =>
                {
                    b.Property<int>("RechargeLogId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("RechargeDate");

                    b.Property<int>("RechargePlanId");

                    b.Property<DateTime>("RechargeValidity");

                    b.Property<int>("UserId");

                    b.HasKey("RechargeLogId");

                    b.HasIndex("RechargePlanId");

                    b.HasIndex("UserId");

                    b.ToTable("RechargeLogs");
                });

            modelBuilder.Entity("sem3.Areas.Admin.Models.DataModels.RechargePlansModel", b =>
                {
                    b.Property<int>("RechargePlanId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RechargePlanData");

                    b.Property<string>("RechargePlanName")
                        .IsRequired();

                    b.Property<int>("RechargePlanPrice");

                    b.Property<string>("RechargePlanValidity")
                        .IsRequired();

                    b.Property<int>("ServiceProviderId");

                    b.HasKey("RechargePlanId");

                    b.HasIndex("ServiceProviderId");

                    b.ToTable("RechargePlans");
                });

            modelBuilder.Entity("sem3.Areas.Admin.Models.DataModels.RechargeReportModel", b =>
                {
                    b.Property<int>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateOfRecharge");

                    b.Property<string>("Phone")
                        .IsRequired();

                    b.Property<int>("RechargePlanId");

                    b.Property<int>("UserId");

                    b.Property<DateTime>("ValidTill");

                    b.HasKey("ReportId");

                    b.HasIndex("RechargePlanId");

                    b.HasIndex("UserId");

                    b.ToTable("RechargeReport");
                });

            modelBuilder.Entity("sem3.Areas.Admin.Models.DataModels.RoleModel", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created_Date");

                    b.Property<string>("RoleName");

                    b.HasKey("RoleId");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("sem3.Areas.Admin.Models.DataModels.ServiceProviderModel", b =>
                {
                    b.Property<int>("ServiceProviderId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ServiceName")
                        .IsRequired();

                    b.HasKey("ServiceProviderId");

                    b.ToTable("ServiceProvider");
                });

            modelBuilder.Entity("sem3.Areas.Admin.Models.DataModels.UsersModel", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<int>("RechargePlanId");

                    b.Property<int>("RoleId");

                    b.Property<int>("ServiceProviderId");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.HasKey("UserId");

                    b.HasIndex("RechargePlanId");

                    b.HasIndex("RoleId");

                    b.HasIndex("ServiceProviderId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("sem3.Areas.Admin.Models.DataModels.WalletModel", b =>
                {
                    b.Property<int>("WalletId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount");

                    b.Property<int>("UserId");

                    b.HasKey("WalletId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Wallet");
                });

            modelBuilder.Entity("sem3.Areas.Admin.Models.DataModels.ContactModel", b =>
                {
                    b.HasOne("sem3.Areas.Admin.Models.DataModels.UsersModel", "User")
                        .WithMany("Contact")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("sem3.Areas.Admin.Models.DataModels.RechargeLogsModel", b =>
                {
                    b.HasOne("sem3.Areas.Admin.Models.DataModels.RechargePlansModel", "RechargePlans")
                        .WithMany("RechargeLogs")
                        .HasForeignKey("RechargePlanId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("sem3.Areas.Admin.Models.DataModels.UsersModel", "Users")
                        .WithMany("RechargeLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("sem3.Areas.Admin.Models.DataModels.RechargePlansModel", b =>
                {
                    b.HasOne("sem3.Areas.Admin.Models.DataModels.ServiceProviderModel", "ServiceProvider")
                        .WithMany("RechargePlans")
                        .HasForeignKey("ServiceProviderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("sem3.Areas.Admin.Models.DataModels.RechargeReportModel", b =>
                {
                    b.HasOne("sem3.Areas.Admin.Models.DataModels.RechargePlansModel", "RechargePlans")
                        .WithMany("RechargeReport")
                        .HasForeignKey("RechargePlanId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("sem3.Areas.Admin.Models.DataModels.UsersModel", "Users")
                        .WithMany("RechargeReports")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("sem3.Areas.Admin.Models.DataModels.UsersModel", b =>
                {
                    b.HasOne("sem3.Areas.Admin.Models.DataModels.RechargePlansModel", "RechargePlans")
                        .WithMany("Users")
                        .HasForeignKey("RechargePlanId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("sem3.Areas.Admin.Models.DataModels.RoleModel", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("sem3.Areas.Admin.Models.DataModels.ServiceProviderModel", "ServiceProvider")
                        .WithMany("Users")
                        .HasForeignKey("ServiceProviderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("sem3.Areas.Admin.Models.DataModels.WalletModel", b =>
                {
                    b.HasOne("sem3.Areas.Admin.Models.DataModels.UsersModel", "Users")
                        .WithOne("Wallet")
                        .HasForeignKey("sem3.Areas.Admin.Models.DataModels.WalletModel", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
